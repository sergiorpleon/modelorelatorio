/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visual;

import java.awt.Desktop;
import java.awt.Dimension;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import modelorelatorio.connectBD;
import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.JDatePickerImpl;
import org.jdatepicker.impl.UtilDateModel;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;
import modelorelatorio.Despesas;
import modelorelatorio.Receitas;
import modelorelatorio.ObjMes;
import modelorelatorio.Resumen;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporter;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.export.HtmlExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.engine.export.JRHtmlExporterParameter;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRTextExporter;
import net.sf.jasperreports.engine.export.JRTextExporterParameter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.export.JRXmlExporter;
import net.sf.jasperreports.engine.util.JRLoader;
import reportes.Mes;
import reportes.ObjDespesa;
import reportes.ObjReceita;
import reportes.ObjResumen;
import reportes.Objgrupo;
import reportes.Objsubgrupo;

/**
 *
 * @author casa
 */
public class Ventana extends javax.swing.JFrame {

    public static int FORMATO_REPORTE_PDF = 0;
    public static int FORMATO_REPORTE_RTF = 1;
    public static int FORMATO_REPORTE_HTML = 2;
    public static int FORMATO_REPORTE_XML = 3;
    public static int FORMATO_REPORTE_CSV = 4;
    public static int FORMATO_REPORTE_TXT = 5;
    public static int FORMATO_REPORTE_XLS = 6;
    
     public int formato;

    String[] annomes;

    connectBD con;

    boolean porMenu;

    DefaultTableModel modelo;
    String[][] valoresmodelo;

    GregorianCalendar c;
    UtilDateModel model;
    JDatePickerImpl datePicker;
    JPanel panel1;

    JPanel panel;

    Receitas rec;
    Despesas des;

    String[][] cat_val;
    String[] catdes;
    String[] subcatdes;

    int accion = 0;//variable que dtermina cuando se inserta o cuando se modifica
    public static int INSERTAR = 1;
    public static int MODIFICAR = 2;
    public static int ELIMINAR = 3;

    int isTabla;
    public static int RESUMEN = 1;
    public static int RECEITA = 2;
    public static int DESPESA = 3;

    int tipoInforme;
    public static int INFR = 1;
    public static int INFD = 2;
    public static int INFM = 3;
    public static int INFA = 4;

    /**
     * Creates new form Ventana
     */
    public Ventana() {
        c = new GregorianCalendar();
        crearComponenteFecha();

        initComponents();

        con = new connectBD();

        try {
            con.EstablecerConexion();
        } catch (SQLException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        //>>>>>>>>>>>Panel central
        porMenu = false;
        llenarTablaResumen();

        //poner fecha en dialog
        setTitle("Relatorio Financeiro sobre receitas e despesas");
        setExtendedState(JFrame.MAXIMIZED_BOTH);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        v_i_r = new javax.swing.JDialog();
        psuperior = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        annoreceita = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        pinferior = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        panelder = new javax.swing.JPanel();
        codigoreceita = new javax.swing.JTextField();
        coordenadasreceitas = new javax.swing.JTextField();
        categoriareceita = new javax.swing.JComboBox();
        cantidadreceita = new javax.swing.JTextField();
        valorreceita = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        v_i_d = new javax.swing.JDialog();
        psup = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        annodespesa = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        mesdespesa = new javax.swing.JComboBox();
        pinf = new javax.swing.JPanel();
        codigodespesa = new javax.swing.JTextField();
        numerodespesa = new javax.swing.JTextField();
        coordenadadespesa = new javax.swing.JTextField();
        fecha = new javax.swing.JPanel();
        categoriadespesa = new javax.swing.JComboBox();
        subategoriadespesa = new javax.swing.JComboBox();
        jSeparator4 = new javax.swing.JSeparator();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        descripciondespesa = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        valordespesa = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        v_m = new javax.swing.JDialog();
        panelizquierdo = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listanno = new javax.swing.JList();
        jLabel26 = new javax.swing.JLabel();
        combomes = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        Tabbed1 = new javax.swing.JTabbedPane();
        paneluno = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        verresumen = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        verreceita = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        verDespesa = new javax.swing.JTable();
        valoranno = new javax.swing.JLabel();
        valormes = new javax.swing.JLabel();
        dialogdel = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        labannodel = new javax.swing.JLabel();
        comboannodel = new javax.swing.JComboBox();
        labmesdel = new javax.swing.JLabel();
        combomesdel = new javax.swing.JComboBox();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tabledel = new javax.swing.JTable();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        dialoginforme = new javax.swing.JDialog();
        jLabel27 = new javax.swing.JLabel();
        comboinfoinst = new javax.swing.JComboBox();
        jLabel29 = new javax.swing.JLabel();
        comboinfoanno = new javax.swing.JComboBox();
        labinfomes = new javax.swing.JLabel();
        comboinfomes = new javax.swing.JComboBox();
        jLabel33 = new javax.swing.JLabel();
        textinfonomb = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        comboformato = new javax.swing.JComboBox();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jButton9 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();

        v_i_r.setModalExclusionType(java.awt.Dialog.ModalExclusionType.TOOLKIT_EXCLUDE);
        v_i_r.setModalityType(java.awt.Dialog.ModalityType.TOOLKIT_MODAL);
        v_i_r.setResizable(false);
        v_i_r.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        psuperior.setLayout(new java.awt.GridLayout(1, 6));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Ano: ");
        psuperior.add(jLabel1);
        psuperior.add(annoreceita);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Mês: ");
        psuperior.add(jLabel2);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        psuperior.add(jComboBox1);

        v_i_r.getContentPane().add(psuperior, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 450, 30));

        pinferior.setLayout(new java.awt.GridLayout(5, 1, 10, 10));

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Código");
        pinferior.add(jLabel5);

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("Coordenadas Bancárias");
        pinferior.add(jLabel18);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Categoria");
        pinferior.add(jLabel6);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Quantidade");
        pinferior.add(jLabel7);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Valor");
        pinferior.add(jLabel8);

        v_i_r.getContentPane().add(pinferior, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 63, 190, 190));
        v_i_r.getContentPane().add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 660, 10));

        panelder.setLayout(new java.awt.GridLayout(5, 1, 10, 10));
        panelder.add(codigoreceita);

        coordenadasreceitas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coordenadasreceitasActionPerformed(evt);
            }
        });
        panelder.add(coordenadasreceitas);

        categoriareceita.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        categoriareceita.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                categoriareceitaMousePressed(evt);
            }
        });
        categoriareceita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoriareceitaActionPerformed(evt);
            }
        });
        panelder.add(categoriareceita);
        panelder.add(cantidadreceita);
        panelder.add(valorreceita);

        v_i_r.getContentPane().add(panelder, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 70, 460, 180));

        jPanel6.setLayout(new java.awt.GridLayout(1, 4, 10, 10));
        jPanel6.add(jLabel3);
        jPanel6.add(jLabel19);

        jButton3.setText("Cancelar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton3);

        jButton1.setText("Aceptar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton1);

        v_i_r.getContentPane().add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 650, 40));
        v_i_r.getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 300, 10, 10));

        v_i_d.setModalExclusionType(java.awt.Dialog.ModalExclusionType.TOOLKIT_EXCLUDE);
        v_i_d.setModalityType(java.awt.Dialog.ModalityType.TOOLKIT_MODAL);
        v_i_d.setResizable(false);
        v_i_d.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        psup.setLayout(new java.awt.GridLayout(1, 6, 10, 10));

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Ano: ");
        psup.add(jLabel4);
        psup.add(annodespesa);

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Mês: ");
        psup.add(jLabel13);

        mesdespesa.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro" }));
        mesdespesa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mesdespesaActionPerformed(evt);
            }
        });
        psup.add(mesdespesa);

        v_i_d.getContentPane().add(psup, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 480, 30));

        pinf.setLayout(new java.awt.GridLayout(6, 1, 10, 10));
        pinf.add(codigodespesa);
        pinf.add(numerodespesa);
        pinf.add(coordenadadespesa);

        fecha.setPreferredSize(new java.awt.Dimension(235, 32));
        fecha.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        /*

        pinf.add(fecha);
        */
        //pinf.add(new JLabel("labelñ"));

        panel1 = new JPanel();
        //fecha.add(new JLabel("fecha"));
        panel1.setAlignmentX(LEFT_ALIGNMENT);
        panel1.add(datePicker);

        pinf.add(panel1);

        categoriadespesa.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        categoriadespesa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoriadespesaActionPerformed(evt);
            }
        });
        pinf.add(categoriadespesa);

        subategoriadespesa.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        pinf.add(subategoriadespesa);

        v_i_d.getContentPane().add(pinf, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 63, 450, 220));
        v_i_d.getContentPane().add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 680, 10));

        jPanel4.setLayout(new java.awt.GridLayout(1, 1, 10, 10));

        descripciondespesa.setColumns(20);
        descripciondespesa.setRows(5);
        jScrollPane3.setViewportView(descripciondespesa);

        jPanel4.add(jScrollPane3);

        v_i_d.getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 298, 450, 100));

        jPanel5.setLayout(new java.awt.GridLayout(1, 1, 10, 10));
        jPanel5.add(valordespesa);

        v_i_d.getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 410, 450, 30));
        v_i_d.getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 460, 10, 10));

        jPanel10.setLayout(new java.awt.GridLayout(1, 4, 10, 10));
        jPanel10.add(jLabel10);
        jPanel10.add(jLabel23);

        jButton4.setText("Cancelar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel10.add(jButton4);

        jButton2.setText("Aceitar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel10.add(jButton2);

        v_i_d.getContentPane().add(jPanel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 450, 690, 40));

        jPanel11.setLayout(new java.awt.GridLayout(6, 0));

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Código");
        jPanel11.add(jLabel14);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("No Documento");
        jPanel11.add(jLabel9);

        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("Coordenadas Bancarias");
        jPanel11.add(jLabel20);

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("Data");
        jPanel11.add(jLabel21);

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Categoria");
        jPanel11.add(jLabel15);

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("Subcategoria");
        jPanel11.add(jLabel16);

        v_i_d.getContentPane().add(jPanel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 200, 230));

        jPanel12.setLayout(new java.awt.GridLayout(1, 1));

        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("Descrição");
        jLabel22.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jPanel12.add(jLabel22);

        v_i_d.getContentPane().add(jPanel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 298, 200, 100));

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("Valor");
        v_i_d.getContentPane().add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 410, 200, 30));

        jLabel24.setText(" ");
        v_i_d.getContentPane().add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 490, 30, 10));

        v_m.setModalExclusionType(java.awt.Dialog.ModalExclusionType.TOOLKIT_EXCLUDE);
        v_m.setModalityType(java.awt.Dialog.ModalityType.TOOLKIT_MODAL);
        v_m.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelizquierdo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelizquierdo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel25.setText("Ano:");
        panelizquierdo.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 120, -1));

        listanno.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listanno.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                listannoMousePressed(evt);
            }
        });
        listanno.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listannoValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(listanno);

        panelizquierdo.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 90, 170));

        jLabel26.setText("Mes:");
        panelizquierdo.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, -1, -1));

        combomes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combomes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combomesActionPerformed(evt);
            }
        });
        panelizquierdo.add(combomes, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, 90, -1));

        v_m.getContentPane().add(panelizquierdo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 130, 460));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        verresumen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane8.setViewportView(verresumen);

        javax.swing.GroupLayout panelunoLayout = new javax.swing.GroupLayout(paneluno);
        paneluno.setLayout(panelunoLayout);
        panelunoLayout.setHorizontalGroup(
            panelunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 845, Short.MAX_VALUE)
        );
        panelunoLayout.setVerticalGroup(
            panelunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelunoLayout.createSequentialGroup()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 42, Short.MAX_VALUE))
        );

        Tabbed1.addTab("Resumen", paneluno);

        verreceita.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(verreceita);

        jButton5.setText(" mudança");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Remover");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 845, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addGap(0, 7, Short.MAX_VALUE))
        );

        Tabbed1.addTab("Receita", jPanel8);

        jButton7.setText(" Mudança");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Remover");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        verDespesa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(verDespesa);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton8)
                .addContainerGap())
            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 845, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton7))
                .addGap(6, 6, 6))
        );

        Tabbed1.addTab("Despesa", jPanel9);

        jPanel2.add(Tabbed1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 850, 410));

        valoranno.setFont(new java.awt.Font("Trajan Pro", 1, 24)); // NOI18N
        valoranno.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        valoranno.setText("valoranno");
        jPanel2.add(valoranno, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 10, 80, 40));

        valormes.setFont(new java.awt.Font("Trajan Pro", 1, 24)); // NOI18N
        valormes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        valormes.setText("Mes");
        jPanel2.add(valormes, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, 180, 40));

        v_m.getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 0, 870, 460));

        dialogdel.setModalExclusionType(java.awt.Dialog.ModalExclusionType.TOOLKIT_EXCLUDE);
        dialogdel.setModalityType(java.awt.Dialog.ModalityType.TOOLKIT_MODAL);

        jPanel1.setLayout(new java.awt.GridLayout(2, 2, 20, 10));

        labannodel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labannodel.setText("Ano:");
        jPanel1.add(labannodel);

        comboannodel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboannodel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboannodelActionPerformed(evt);
            }
        });
        jPanel1.add(comboannodel);

        labmesdel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labmesdel.setText("Mês:");
        jPanel1.add(labmesdel);

        combomesdel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combomesdel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combomesdelActionPerformed(evt);
            }
        });
        jPanel1.add(combomesdel);

        jPanel7.setLayout(new java.awt.GridLayout(1, 1));

        tabledel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(tabledel);

        jPanel7.add(jScrollPane6);

        jButton10.setText("Acepatar");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setText("Cancelar");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dialogdelLayout = new javax.swing.GroupLayout(dialogdel.getContentPane());
        dialogdel.getContentPane().setLayout(dialogdelLayout);
        dialogdelLayout.setHorizontalGroup(
            dialogdelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(dialogdelLayout.createSequentialGroup()
                .addContainerGap(646, Short.MAX_VALUE)
                .addComponent(jButton11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton10)
                .addContainerGap())
            .addGroup(dialogdelLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        dialogdelLayout.setVerticalGroup(
            dialogdelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogdelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(dialogdelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton10)
                    .addComponent(jButton11))
                .addContainerGap())
        );

        dialoginforme.setMinimumSize(new java.awt.Dimension(400, 240));
        dialoginforme.setModalExclusionType(java.awt.Dialog.ModalExclusionType.TOOLKIT_EXCLUDE);
        dialoginforme.setModalityType(java.awt.Dialog.ModalityType.TOOLKIT_MODAL);
        dialoginforme.setSize(new java.awt.Dimension(530, 290));
        dialoginforme.getContentPane().setLayout(new java.awt.GridLayout(7, 2, 10, 10));

        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel27.setText("Instituição");
        dialoginforme.getContentPane().add(jLabel27);

        comboinfoinst.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        dialoginforme.getContentPane().add(comboinfoinst);

        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel29.setText("Ano");
        dialoginforme.getContentPane().add(jLabel29);

        comboinfoanno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboinfoanno.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboinfoannoItemStateChanged(evt);
            }
        });
        dialoginforme.getContentPane().add(comboinfoanno);

        labinfomes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labinfomes.setText("Mês");
        dialoginforme.getContentPane().add(labinfomes);

        comboinfomes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        dialoginforme.getContentPane().add(comboinfomes);

        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel33.setText("Nome");
        dialoginforme.getContentPane().add(jLabel33);
        dialoginforme.getContentPane().add(textinfonomb);

        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel28.setText("Guardar en");
        dialoginforme.getContentPane().add(jLabel28);

        comboformato.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PDF", "RTF", "HTML", "XML", "CSV", "TXT" }));
        dialoginforme.getContentPane().add(comboformato);
        dialoginforme.getContentPane().add(jLabel31);
        dialoginforme.getContentPane().add(jLabel32);

        jButton12.setText("Cancelar");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        dialoginforme.getContentPane().add(jButton12);

        jButton13.setText("Aceptar");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        dialoginforme.getContentPane().add(jButton13);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabla);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jButton9.setText("Ver Mês");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(430, Short.MAX_VALUE)
                .addComponent(jButton9)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton9))
        );

        getContentPane().add(jPanel3, java.awt.BorderLayout.PAGE_END);

        jMenu1.setText("Archivo");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edicion");

        jMenuItem10.setText("Ver Mês");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem10);
        jMenu2.add(jSeparator5);

        jMenuItem1.setText("Inserir Receita");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem2.setText("Inserir Despesa");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);
        jMenu2.add(jSeparator1);

        jMenuItem3.setText(" Mudança Receita");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Mudança Despesa");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);
        jMenu2.add(jSeparator2);

        jMenuItem5.setText("Remover Receita");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem6.setText("Remover Despesa");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setText("Eliminar Mes");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Informe");

        jMenuItem8.setText("Informe Receita");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem8);

        jMenuItem9.setText("Informe Despesa");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem9);

        jMenuItem11.setText("Informe Mes");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem11);

        jMenuItem12.setText("Informe Año");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem12);

        jMenuItem13.setText("jMenuItem13");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem13);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:

        //--------Accion menu Insertar Receita
        //v_i_r = new JDialog();
        GregorianCalendar gc = new GregorianCalendar();
        annoreceita.setText(gc.get(Calendar.YEAR) + "");

        cat_val = con.getCatValor();
        DefaultComboBoxModel cm = new DefaultComboBoxModel(cat_val[0]);

        valorreceita.setText(cat_val[1][0]);
        categoriareceita.setModel(cm);

        accion = INSERTAR;
        annoreceita.setEnabled(true);
        jComboBox1.setEnabled(true);

        v_i_r.setTitle("COLOCAÇÃO RECEITA");
        v_i_r.pack();
        v_i_r.setLocationRelativeTo(v_i_r.getParent());
        v_i_r.show();
        v_i_r.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void mesdespesaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mesdespesaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mesdespesaActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:

        //--------Accion menu Insertar Despesa
        //v_i_r = new JDialog();
        GregorianCalendar gc = new GregorianCalendar();
        annodespesa.setText(gc.get(Calendar.YEAR) + "");

        catdes = con.getCatDesGrupo();
        DefaultComboBoxModel cm1 = new DefaultComboBoxModel(catdes);
        categoriadespesa.setModel(cm1);

        subcatdes = con.getCatDesValores(catdes[0]);
        DefaultComboBoxModel cm2 = new DefaultComboBoxModel(subcatdes);
        subategoriadespesa.setModel(cm2);

        accion = INSERTAR;
        annodespesa.setEnabled(true);
        mesdespesa.setEnabled(true);

        v_i_d.setTitle("COLOCAÇÃO DESPESA");
        v_i_d.pack();
        v_i_d.setLocationRelativeTo(v_i_d.getParent());
        v_i_d.show();
        v_i_d.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:

        //--------Accion menu Modificar Receita
        isTabla = RECEITA;
        accion = MODIFICAR;
        inicializarValoresMes2("", "");

        labannodel.setVisible(true);
        labmesdel.setVisible(true);
        comboannodel.setVisible(true);
        combomesdel.setVisible(true);

        jButton10.setText("Mudança");
        dialogdel.setTitle("MUDANÇA RECEITA");
        dialogdel.pack();
        dialogdel.setLocationRelativeTo(dialogdel.getParent());
        dialogdel.show();
        dialogdel.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:

//--------Accion menu Modificar Despesa
        isTabla = DESPESA;
        accion = MODIFICAR;
        inicializarValoresMes2("", "");

        labannodel.setVisible(true);
        labmesdel.setVisible(true);
        comboannodel.setVisible(true);
        combomesdel.setVisible(true);

        jButton10.setText("Mudança");
        dialogdel.setTitle("MUDANÇA DESPESA");
        dialogdel.pack();
        dialogdel.setLocationRelativeTo(dialogdel.getParent());
        dialogdel.show();
        dialogdel.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);

    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        // TODO add your handling code here:
        //------------Boton aceptar despesa
        String anno = annodespesa.getText();

        String mes = (mesdespesa.getSelectedIndex() + 1) + "";

        String codigo = codigodespesa.getText();

        String numerodocumento = numerodespesa.getText();

        String coordenadas = coordenadadespesa.getText();

        String y = datePicker.getModel().getYear() + "";

        String m = datePicker.getModel().getMonth() + 1 + "";
        //if(m.length()==1){
        //    m = "0" + m;
        //}

        String dia = datePicker.getModel().getDay() + "";
        //if(dia.length()==1){
        //    dia = "0" + dia;
        //}
        String fecha = m + "/" + dia + "/" + y;

        System.out.println("fecha " + fecha);

        String categoria = (String) categoriadespesa.getSelectedItem();

        String subcategoria = (String) subategoriadespesa.getSelectedItem();

        String descripcion = descripciondespesa.getText();

        String valor = valordespesa.getText();

        //bton acepatar incertar receita
        if (anno.length() == 4 && isDigitoInt(anno) && isDigitoDouble(valor)) {

            if (accion == INSERTAR) {
            //String anno = annodespesa.getText();

                //String mes = (mesdespesa.getSelectedIndex() + 1) + "";
                //String codigo = codigodespesa.getText();
                //String numerodocumento = numerodespesa.getText();
                //String y = datePicker.getModel().getYear() + "";
                //String m = datePicker.getModel().getMonth() + "";
                //if(m.length()==1){
                //    m = "0" + m;
                //}
                //String dia = datePicker.getModel().getDay() + "";
                //if(dia.length()==1){
                //    dia = "0" + dia;
                //}
                //String fecha = m + "/" + dia + "/" + y;
                //System.out.println("fecha " + fecha);
                //String categoria = (String) categoriadespesa.getSelectedItem();
                //String subcategoria = (String) subategoriadespesa.getSelectedItem();
                //String descripcion = descripciondespesa.getText();
                //String valor = valordespesa.getText();
                Despesas d = new Despesas();
                d.setNumero((codigo));
                d.setNumeroDocumento((numerodocumento));
                d.setCoordenada(coordenadas);
                d.setFecha(fecha);
                d.setCategoria(categoria);
                d.setSubcategoria(subcategoria);
                d.setDescripcion(descripcion);
                d.setValor(Double.parseDouble(valor));
                insertarDespesa(anno, mes, d);

                llenarTablaResumen();

                v_i_d.setVisible(false);
            } else if (accion == MODIFICAR) {
                try {

                    des.setNumero((codigo));
                    des.setNumeroDocumento((numerodocumento));
                    des.setCoordenada(coordenadas);
                    des.setFecha(fecha);
                    des.setCategoria(categoria);
                    des.setSubcategoria(subcategoria);
                    des.setDescripcion(descripcion);
                    des.setValor(Double.parseDouble(valor));

                    //insertarReceita(anno, mes, rec);
                    con.actualizarDespesa(anno, mes, des);

                    //actualizar
                    //update
                    String idRes = des.getIdresumen() + "";

                    double sumReceita = con.sumaTotalReceita(Integer.parseInt(idRes));
                    double sumDespesas = con.sumaTotalDespesa(Integer.parseInt(idRes));

                    con.update("resumen", "Id", idRes + "", "receitas", sumReceita + "");
                    con.update("resumen", "Id", idRes + "", "despesas", sumDespesas + "");

                    //actualizar
                    //actualizar tabla general
                    actualizarMesAnterior(anno, Config.meses[Integer.parseInt(mes)]);

                    //llenarTablaResumen();
                    annomes[0] = anno;
                    annomes[1] = mes;

                    dibujarTablaDespesa();
                    dibujarTablaResumen();

                    //nuevo
                    annomes[0] = comboannodel.getSelectedItem() + "";
                    annomes[1] = Config.obtenerIndiceMes((String) combomesdel.getSelectedItem()) + "";
                    dibujarTablaDespesa2();

                    llenarTablaResumen();
                    v_i_d.setVisible(false);
                } catch (SQLException ex) {
                    Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        if (!isDigitoInt(anno) || anno.length() != 4) {
            JOptionPane.showMessageDialog(v_i_r, "O campo data incorreta", "Erro", JOptionPane.WARNING_MESSAGE);

        } else if (!isDigitoDouble(valor)) {
            JOptionPane.showMessageDialog(v_i_r, "O campo valor incorreto", "Erro", JOptionPane.WARNING_MESSAGE);

        }
        //System.out.println("impr " + datePicker.getModel().getDay() + "-" + datePicker.getModel().getMonth() + "-" + datePicker.getModel().getYear());
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:

        //------------Accion menu VER mes------------
        inicializarValoresMes("", "");

        v_m.pack();
        v_m.setLocationRelativeTo(v_m.getParent());
        v_m.show();
        v_m.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:

//------------Boton VER mes------------
        try {
            int indtabla = tabla.getSelectedRow();
            if (indtabla >= 0) {
                String annomodelo = valoresmodelo[indtabla][0];
                String mesomodelo = valoresmodelo[indtabla][1];
                int mes = Config.obtenerIndiceMes(mesomodelo);
                inicializarValoresMes(annomodelo, "");
                inicializarValoresMes(annomodelo, mes + "");
                //String[] meses = con.getListaMeses(annomodelo);
                //combomes = new JComboBox(meses);
                combomes.setSelectedItem(mesomodelo);
            } else {
                inicializarValoresMes("", "");

            }

            v_m.pack();
            v_m.setLocationRelativeTo(v_m.getParent());
            v_m.show();
            v_m.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        } catch (Exception e) {

        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void listannoValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listannoValueChanged
        // TODO add your handling code here:


    }//GEN-LAST:event_listannoValueChanged

    private void listannoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listannoMousePressed
        // TODO add your handling code here:
        //evento de cambio lista años
        String anno = "";
        anno = (String) listanno.getSelectedValue();

        //String[] cmeses = con.getListaMeses(año);
        //DefaultComboBoxModel cbm = new DefaultComboBoxModel(cmeses);
        //combomes.setModel(cbm);
        inicializarValoresMes(anno, "");
    }//GEN-LAST:event_listannoMousePressed

    private void combomesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combomesActionPerformed
        // TODO add your handling code here:
        String anno = "";
        anno = valoranno.getText();
        String mes = "";
        mes = (combomes.getSelectedItem()) + "";
        //String[] cmeses = con.getListaMeses(año);
        //DefaultComboBoxModel cbm = new DefaultComboBoxModel(cmeses);
        //combomes.setModel(cbm);
        //System.out.println("entra combo " + mes);
        inicializarValoresMes(anno, obtenermes(mes) + "");
    }//GEN-LAST:event_combomesActionPerformed

    private void categoriareceitaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_categoriareceitaMousePressed
        // TODO add your handling code here:


    }//GEN-LAST:event_categoriareceitaMousePressed

    private void categoriareceitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoriareceitaActionPerformed
        // TODO add your handling code here:
        //Accion modificacion combo categoria receita
        int indi = categoriareceita.getSelectedIndex();
        valorreceita.setText(cat_val[1][indi]);
    }//GEN-LAST:event_categoriareceitaActionPerformed

    private void categoriadespesaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoriadespesaActionPerformed
        // TODO add your handling code here:
        //accion cuando seleccion de grupo
        int ind_g = categoriadespesa.getSelectedIndex();

        subcatdes = con.getCatDesValores(catdes[ind_g]);
        DefaultComboBoxModel cm2 = new DefaultComboBoxModel(subcatdes);
        subategoriadespesa.setModel(cm2);

    }//GEN-LAST:event_categoriadespesaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        String anno = annoreceita.getText();

        String mes = (jComboBox1.getSelectedIndex() + 1) + "";

        String codigo = codigoreceita.getText();

        String coordenadas = coordenadasreceitas.getText();

        String categoria = (String) categoriareceita.getSelectedItem();

        String cantidad = cantidadreceita.getText();

        String valor = valorreceita.getText();

        //bton acepatar incertar receita
        if (anno.length() == 4 && isDigitoInt(anno) && isDigitoInt(cantidad) && isDigitoDouble(valor)) {
            if (accion == INSERTAR) {
            //String anno = annoreceita.getText();

                //String mes = (jComboBox1.getSelectedIndex() + 1) + "";
                //String codigo = codigoreceita.getText();
                //String categoria = (String) categoriareceita.getSelectedItem();
                //String cantidad = cantidadreceita.getText();
                //String valor = valorreceita.getText();
                Receitas r = new Receitas();
                r.setNumero((codigo));
                r.setCoordenada((coordenadas));
                r.setCategoria(categoria);
                r.setCantidad(Integer.parseInt(cantidad));
                r.setValor(Double.parseDouble(valor));
                insertarReceita(anno, mes, r);

                llenarTablaResumen();

                v_i_r.setVisible(false);
            } else if (accion == MODIFICAR) {
                try {
                    con.getReceitaMes(annoreceita.getText(), (jComboBox1.getSelectedIndex() + 1) + "");

                    rec.setNumero((codigo));
                    rec.setCoordenada((coordenadas));
                    rec.setCategoria(categoria);
                    rec.setCantidad(Integer.parseInt(cantidad));
                    rec.setValor(Float.valueOf(valor));
                    //insertarReceita(anno, mes, rec);
                    String[] annomes = con.getAnnoMesporID(rec.getIdresumen());

                    actualizarReceita(anno, mes, rec);

                    //update
                    String idRes = rec.getIdresumen() + "";

                    double sumReceita = con.sumaTotalReceita(Integer.parseInt(idRes));
                    double sumDespesas = con.sumaTotalDespesa(Integer.parseInt(idRes));

                    con.update("resumen", "Id", idRes + "", "receitas", sumReceita + "");
                    con.update("resumen", "Id", idRes + "", "despesas", sumDespesas + "");

                    //actualizar
                    //actualizar tabla general
                    actualizarMesAnterior(anno, Config.meses[Integer.parseInt(mes)]);

                    llenarTablaResumen();

                    annomes[0] = anno;
                    annomes[1] = mes;
                    dibujarTablaReceita();
                    dibujarTablaResumen();

                    //nuevo
                    //annomes[0] = comboannodel.getSelectedItem() + "";
                    //annomes[1] = Config.obtenerIndiceMes((String) combomesdel.getSelectedItem()) + "";
                    dibujarTablaReceita2();

                    llenarTablaResumen();

                    v_i_r.setVisible(false);
                } catch (SQLException ex) {
                    Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        if (!isDigitoInt(anno) || anno.length() != 4) {
            JOptionPane.showMessageDialog(v_i_r, "O campo data incorreta", "Erro", JOptionPane.WARNING_MESSAGE);

        } else if (!isDigitoInt(cantidad)) {
            JOptionPane.showMessageDialog(v_i_r, "Campo quantidade incorreta", "Erro", JOptionPane.WARNING_MESSAGE);

        } else if (!isDigitoDouble(valor)) {
            JOptionPane.showMessageDialog(v_i_r, "O campo valor incorreto", "Erro", JOptionPane.WARNING_MESSAGE);

        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void comboannodelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboannodelActionPerformed
        // TODO add your handling code here:
        //Seleccionar meses
        String anno = "";
        anno = (String) comboannodel.getSelectedItem();

        //String[] cmeses = con.getListaMeses(año);
        //DefaultComboBoxModel cbm = new DefaultComboBoxModel(cmeses);
        //combomes.setModel(cbm);
        inicializarValoresMes2(anno, "");

    }//GEN-LAST:event_comboannodelActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        isTabla = RECEITA;
        accion = ELIMINAR;
        inicializarValoresMes2("", "");

        labannodel.setVisible(true);
        labmesdel.setVisible(true);
        comboannodel.setVisible(true);
        combomesdel.setVisible(true);

        jButton10.setText("Eliminar");
        dialogdel.setTitle("ELIMINAR RECEITA");
        dialogdel.pack();
        dialogdel.setLocationRelativeTo(dialogdel.getParent());
        dialogdel.show();
        dialogdel.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void combomesdelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combomesdelActionPerformed
        // TODO add your handling code here:
        String anno = "";
        anno = comboannodel.getSelectedItem() + "";
        String mes = "";
        mes = (combomesdel.getSelectedItem()) + "";
        //String[] cmeses = con.getListaMeses(año);
        //DefaultComboBoxModel cbm = new DefaultComboBoxModel(cmeses);
        //combomes.setModel(cbm);
        //System.out.println("entra combo " + mes);
        inicializarValoresMes2(anno, obtenermes(mes) + "");

    }//GEN-LAST:event_combomesdelActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        //elim des
        isTabla = DESPESA;
        accion = ELIMINAR;
        inicializarValoresMes2("", "");

        labannodel.setVisible(true);
        labmesdel.setVisible(true);
        comboannodel.setVisible(true);
        combomesdel.setVisible(true);

        jButton10.setText("Eliminar");
        dialogdel.setTitle("ELIMINAR DESPESA");
        dialogdel.pack();
        dialogdel.setLocationRelativeTo(dialogdel.getParent());
        dialogdel.show();
        dialogdel.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);

    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed

        // TODO add your handling code here:
        //delete mes
        isTabla = RESUMEN;
        accion = ELIMINAR;
        inicializarValoresMes2("", "");

        labannodel.setVisible(false);
        labmesdel.setVisible(false);
        comboannodel.setVisible(false);
        combomesdel.setVisible(false);

        jButton10.setText("Eliminar");
        dialogdel.setTitle("ELIMINAR MES");
        dialogdel.pack();
        dialogdel.setLocationRelativeTo(dialogdel.getParent());
        dialogdel.show();
        dialogdel.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);


    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        //accion aceptar ventana 4
        try {
            porMenu = false;
            if (accion == ELIMINAR) {
                dialogdel.setEnabled(false);
                int res = JOptionPane.showConfirmDialog(dialogdel, "Confirmar excluir", "Eliminar", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (res == JOptionPane.NO_OPTION) {
                    dialogdel.setEnabled(true);
                    this.setVisible(true);
                    dialogdel.setVisible(true);
                }
                if (res == JOptionPane.YES_OPTION) {

                    if (isTabla == RECEITA) {
                        if (Config.indiceReceita[0] != null) {

                            try {

                                int indtabla = tabledel.getSelectedRow();
                                if (indtabla >= 0) {

                                    String indrec = Config.indiceReceita[indtabla];

                                    //eliminar receita
                                    String idRes = con.getIdReceita(indrec);
                                    con.delete("receita", "Id", indrec);

                                    //******update
                                    String anno = (String) comboannodel.getSelectedItem();
                                    String mes = (String) combomesdel.getSelectedItem();

                                    //String idRes = rec.getIdresumen() + "";
                                    //String idRes = indrec + "";
                                    double sumReceita = con.sumaTotalReceita(Integer.parseInt(idRes));
                                    double sumDespesas = con.sumaTotalDespesa(Integer.parseInt(idRes));

                                    con.update("resumen", "Id", idRes + "", "receitas", sumReceita + "");
                                    con.update("resumen", "Id", idRes + "", "despesas", sumDespesas + "");

                                    //actualizar
                                    //nuevo
                                    annomes[0] = comboannodel.getSelectedItem() + "";
                                    annomes[1] = Config.obtenerIndiceMes((String) combomesdel.getSelectedItem()) + "";
                                    dibujarTablaReceita2();

                                    //actualizar tabla general
                                    actualizarMesAnterior(anno, mes);

                                    //???ver si esta vacio las receita y sepesas del mes y eliminar mes
                                }
                            } catch (SQLException ex) {
                                //Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    } else if (isTabla == DESPESA) {
                        if (Config.indiceDespesa[0] != null) {

                            try {

                                int indtabla = tabledel.getSelectedRow();
                                if (indtabla >= 0) {

                                    String inddes = Config.indiceDespesa[indtabla];

                                    String idRes = con.getIdDespesa(inddes);
                                    //eliminar receita
                                    con.delete("despesas", "Id", inddes);

                                    //******update
                                    String anno = (String) comboannodel.getSelectedItem();
                                    String mes = (String) combomesdel.getSelectedItem();

                                    //String idRes = rec.getIdresumen() + "";
                                    //String idRes = inddes + "";
                                    double sumReceita = con.sumaTotalReceita(Integer.parseInt(idRes));
                                    double sumDespesas = con.sumaTotalDespesa(Integer.parseInt(idRes));

                                    con.update("resumen", "Id", idRes + "", "receitas", sumReceita + "");
                                    con.update("resumen", "Id", idRes + "", "despesas", sumDespesas + "");

                                    //actualizar
                                    //actualizar tabla general
                                    actualizarMesAnterior(anno, mes);

                                    //nuevo
                                    annomes[0] = comboannodel.getSelectedItem() + "";
                                    annomes[1] = Config.obtenerIndiceMes((String) combomesdel.getSelectedItem()) + "";
                                    dibujarTablaDespesa2();

                                    //???ver si esta vacio las receita y sepesas del mes y eliminar mes
                                }
                            } catch (SQLException ex) {
                                // Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    } else if (isTabla == RESUMEN) {
                        if (Config.indiceResumen[0] != null) {

                            try {

                                int indtabla = tabledel.getSelectedRow();
                                if (indtabla >= 0) {

                                    String indrec = Config.indiceResumen[indtabla];

                                    String[] annomes = con.getAnnoMesporID(Integer.parseInt(indrec));
                        //String mes = comboannod

                                    //eliminar receita
                                    con.delete("resumen", "Id", indrec);
                                    con.delete("receita", "idresumen", indrec);
                                    con.delete("despesas", "idresumen", indrec);

                                    actualizarMesAnterior(annomes[0], annomes[1]);

                                    //nuevo
                                    String[] nombresColumnas = new String[]{"Ano", "Mês", "Receita Total", "Sum Despensas", "Saldo Mensal", "Saldo anterior", "Saldo atual"};
                                    valoresmodelo = con.getResumen();
                                    modelo = new DefaultTableModel(valoresmodelo, nombresColumnas) {

                                        @Override
                                        public boolean isCellEditable(int row, int column) {
                                            return false;
                                        }
                                    };
                                    tabledel.setModel(modelo);

                                    //???ver si esta vacio las receita y sepesas del mes y eliminar mes
                                }
                            } catch (SQLException ex) {
                                //Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                    llenarTablaResumen();
                    dialogdel.setEnabled(true);
                    this.setVisible(true);
                    dialogdel.setVisible(true);

                }
            } else if (accion == MODIFICAR) {
                if (isTabla == RECEITA) {
                    if (Config.indiceReceita[0] != null) {

                        rec = new Receitas();
                        int indtabla = tabledel.getSelectedRow();
                        if (indtabla >= 0) {
                            String indrec = Config.indiceReceita[indtabla];

                            rec = con.getUnaReceita(indrec);

                            String[] annomes = con.getAnnoMesporID(rec.getIdresumen());
                            annoreceita.setText(annomes[0]);
                            jComboBox1.setSelectedItem(Config.meses[Integer.parseInt(annomes[1])]);

                            cat_val = con.getCatValor();
                            DefaultComboBoxModel cm = new DefaultComboBoxModel(cat_val[0]);

                            codigoreceita.setText(rec.getNumero() + "");
                            coordenadasreceitas.setText(rec.getCoordenada() + "");
                            categoriareceita.setModel(cm);
                            categoriareceita.setSelectedItem(rec.getCategoria() + "");
                            cantidadreceita.setText(rec.getCantidad() + "");
                            valorreceita.setText(rec.getValor() + "");

                            //v_i_r.setVisible(true);
                            accion = MODIFICAR;
                            annoreceita.setEnabled(false);
                            jComboBox1.setEnabled(false);

                            v_i_r.setTitle("MUDANÇA RECEITA");
                            v_i_r.pack();
                            v_i_r.setLocationRelativeTo(v_m.getParent());
                            v_i_r.show();
                            v_i_r.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
                        } else {
                            //inicializarValoresMes("", "");
                        }
                    }
                } else if (isTabla == DESPESA) {
                    if (Config.indiceDespesa[0] != null) {

                        des = new Despesas();
                        int indtabla = tabledel.getSelectedRow();
                        if (indtabla >= 0) {
                            String indrec = Config.indiceDespesa[indtabla];

                            des = con.getUnaDespesas(indrec);
                            String[] annomes = con.getAnnoMesporID(des.getIdresumen());
                            annodespesa.setText(annomes[0]);
                            mesdespesa.setSelectedItem(Config.meses[Integer.parseInt(annomes[1])]);

                            catdes = con.getCatDesGrupo();
                            DefaultComboBoxModel cm1 = new DefaultComboBoxModel(catdes);
                            categoriadespesa.setModel(cm1);

                            subcatdes = con.getCatDesValores(catdes[0]);
                            DefaultComboBoxModel cm2 = new DefaultComboBoxModel(subcatdes);
                            subategoriadespesa.setModel(cm2);

                            codigodespesa.setText(des.getNumero() + "");
                            numerodespesa.setText(des.getNumeroDocumento() + "");
                            coordenadadespesa.setText(des.getCoordenada() + "");

                            //>>>fecha
                            c = new GregorianCalendar();
                            //fecha = 2000-02-02 00:00:00.000000
                            String[] fecdes = des.getFecha().split(" ");
                            //fecha = 2000-02-02
                            fecdes = fecdes[0].split("-");
                            //arreglo fecha = {2000,2,2}
                            //c.set(Integer.parseInt(fecdes[0]), Integer.parseInt(fecdes[1])-1, Integer.parseInt(fecdes[2]));
                            //crearComponenteFecha();
                            datePicker.getModel().setYear(Integer.parseInt(fecdes[0]));
                            datePicker.getModel().setMonth(Integer.parseInt(fecdes[1]) - 1);
                            datePicker.getModel().setDay(Integer.parseInt(fecdes[2]));

                            panel1.removeAll();
                            //panel1 = new JPanel();
                            //fecha.add(new JLabel("fecha"));
                            //panel1.setAlignmentX(LEFT_ALIGNMENT);
                            panel1.add(datePicker);

                            //<<<fecha
                            categoriadespesa.setSelectedItem(des.getCategoria());
                            subategoriadespesa.setSelectedItem(des.getSubcategoria());
                            descripciondespesa.setText(des.getDescripcion() + "");
                            valordespesa.setText(des.getValor() + "");

                            //v_i_r.setVisible(true);
                            accion = MODIFICAR;
                            annodespesa.setEnabled(false);
                            mesdespesa.setEnabled(false);

                            v_i_d.setTitle("MUDANÇA DESPESA");
                            v_i_d.pack();
                            v_i_d.setLocationRelativeTo(v_m.getParent());
                            v_i_d.show();
                            v_i_d.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);

                        } else {
                            //inicializarValoresMes("", "");

                        }
                    }
                }

            }
        } catch (Exception e) {

        }

    }//GEN-LAST:event_jButton10ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed

        labinfomes.setVisible(true);
        comboinfomes.setVisible(true);
        //System.out.println("anno mes " + annomes[0] + " " + annomes[1]);
        String[] listinstituciones = con.getListaInstituciones();
        String[] listannos = con.getListaAnnos();
        String[] listmeses = con.getListaMeses(listannos[0]);

        //convertir lista a cadena
        String[] newlistameses = new String[listmeses.length];
        for (int i = 0; i < listmeses.length; i++) {
            newlistameses[i] = Config.meses[Integer.parseInt(listmeses[i])];

        }

        DefaultComboBoxModel dcbmi = new DefaultComboBoxModel(listinstituciones);
        comboinfoinst.setModel(dcbmi);

        DefaultComboBoxModel dcbmm = new DefaultComboBoxModel(newlistameses);
        comboinfomes.setModel(dcbmm);

        DefaultComboBoxModel dcbma = new DefaultComboBoxModel(listannos);
        comboinfoanno.setModel(dcbma);

        textinfonomb.setText("relatórioReceita");
        tipoInforme = INFR;

        dialoginforme.setTitle("RELATÓRIO RECEITA");
        //dialoginforme.pack();
        dialoginforme.setLocationRelativeTo(dialoginforme.getParent());
        dialoginforme.show();


    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        //informe despesa
        labinfomes.setVisible(true);
        comboinfomes.setVisible(true);
//System.out.println("anno mes " + annomes[0] + " " + annomes[1]);
        String[] listinstituciones = con.getListaInstituciones();
        String[] listannos = con.getListaAnnos();
        String[] listmeses = con.getListaMeses(listannos[0]);

        //convertir lista a cadena
        String[] newlistameses = new String[listmeses.length];
        for (int i = 0; i < listmeses.length; i++) {
            newlistameses[i] = Config.meses[Integer.parseInt(listmeses[i])];

        }

        DefaultComboBoxModel dcbmi = new DefaultComboBoxModel(listinstituciones);
        comboinfoinst.setModel(dcbmi);

        DefaultComboBoxModel dcbmm = new DefaultComboBoxModel(newlistameses);
        comboinfomes.setModel(dcbmm);

        DefaultComboBoxModel dcbma = new DefaultComboBoxModel(listannos);
        comboinfoanno.setModel(dcbma);

        textinfonomb.setText("relatórioDespesa");
        tipoInforme = INFD;

        dialoginforme.setTitle("RELATÓRIO DESPESA");
        //dialoginforme.pack();
        dialoginforme.setLocationRelativeTo(dialoginforme.getParent());
        dialoginforme.show();

    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed

        labinfomes.setVisible(true);
        comboinfomes.setVisible(true);
//System.out.println("anno mes " + annomes[0] + " " + annomes[1]);
        String[] listinstituciones = con.getListaInstituciones();
        String[] listannos = con.getListaAnnos();
        String[] listmeses = con.getListaMeses(listannos[0]);

        //convertir lista a cadena
        String[] newlistameses = new String[listmeses.length];
        for (int i = 0; i < listmeses.length; i++) {
            newlistameses[i] = Config.meses[Integer.parseInt(listmeses[i])];

        }

        DefaultComboBoxModel dcbmi = new DefaultComboBoxModel(listinstituciones);
        comboinfoinst.setModel(dcbmi);

        DefaultComboBoxModel dcbmm = new DefaultComboBoxModel(newlistameses);
        comboinfomes.setModel(dcbmm);

        DefaultComboBoxModel dcbma = new DefaultComboBoxModel(listannos);
        comboinfoanno.setModel(dcbma);

        textinfonomb.setText("relatórioMês");
        tipoInforme = INFM;

        dialoginforme.setTitle("RELATÓRIO MÊS");
        //dialoginforme.pack();
        dialoginforme.setLocationRelativeTo(dialoginforme.getParent());
        dialoginforme.show();


    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void coordenadasreceitasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coordenadasreceitasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_coordenadasreceitasActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        //cancelar despesa
        dialogdel.setVisible(false);
        v_i_d.setVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        //cancelar receita
        dialogdel.setVisible(false);
        v_i_r.setVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        //cancelar dialogo del
        dialogdel.setVisible(false);


    }//GEN-LAST:event_jButton11ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        labinfomes.setVisible(false);
        comboinfomes.setVisible(false);
        // TODO add your handling code here:
        //System.out.println("anno mes " + annomes[0] + " " + annomes[1]);
        String[] listinstituciones = con.getListaInstituciones();
        String[] listannos = con.getListaAnnos();
        String[] listmeses = con.getListaMeses(listannos[0]);

        //convertir lista a cadena
        String[] newlistameses = new String[listmeses.length];
        for (int i = 0; i < listmeses.length; i++) {
            newlistameses[i] = Config.meses[Integer.parseInt(listmeses[i])];

        }

        DefaultComboBoxModel dcbmi = new DefaultComboBoxModel(listinstituciones);
        comboinfoinst.setModel(dcbmi);

        DefaultComboBoxModel dcbmm = new DefaultComboBoxModel(newlistameses);
        comboinfomes.setModel(dcbmm);

        DefaultComboBoxModel dcbma = new DefaultComboBoxModel(listannos);
        comboinfoanno.setModel(dcbma);

        textinfonomb.setText("relatórioAno");
        tipoInforme = INFA;

        dialoginforme.setTitle("RELATÓRIO ANO");
        //dialoginforme.pack();
        dialoginforme.setLocationRelativeTo(dialoginforme.getParent());
        dialoginforme.show();

    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void comboinfoannoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboinfoannoItemStateChanged
        // TODO add your handling code here:

        String[] listmeses = con.getListaMeses(comboinfoanno.getSelectedItem() + "");

        //convertir lista a cadena
        String[] newlistmeses = new String[listmeses.length];
        for (int i = 0; i < listmeses.length; i++) {
            newlistmeses[i] = Config.meses[Integer.parseInt(listmeses[i])];

        }

        DefaultComboBoxModel cbmm = new DefaultComboBoxModel(newlistmeses);
        comboinfomes.setModel(cbmm);

    }//GEN-LAST:event_comboinfoannoItemStateChanged

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
        dialoginforme.setVisible(false);
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
        String anno = comboinfoanno.getSelectedItem() + "";
        String mes = comboinfomes.getSelectedItem() + "";
        String inst = comboinfoinst.getSelectedItem() + "";
        String nomb = textinfonomb.getText() + "";
        if (tipoInforme == INFR) {
            informeReceita(anno, mes, inst, nomb);
        }
        if (tipoInforme == INFD) {
            informeDespesa(anno, mes, inst, nomb);
        }
        if (tipoInforme == INFM) {
            informeMes(anno, mes, inst, nomb);
        }
        if (tipoInforme == INFA) {
            informeAnno(anno, inst, nomb);
        }

        dialoginforme.setVisible(false);

    }//GEN-LAST:event_jButton13ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
            try {                                            
                // TODO add your handling code here:
                String nomb = "reporteCategoria";
                String anno = "2000";
                String mes = "Mes";
                String inst = "Economia";
                //LinkedList<Objsubgrupo> listaDespesas = con.getListaCategoria("2000", 5 + "");
                LinkedList<Objgrupo> listaDespesas = con.getListaCategoria("2000", 5 + "");
                
                System.out.println("tamanno " + listaDespesas.size());
                
                //JasperReport reporte = (JasperReport) JRLoader.loadObject(new File("src\\reportes\\reporteSubgrupo.jasper"));
                JasperReport reporte = (JasperReport) JRLoader.loadObject(new File("src\\reportes\\reporteGrupo.jasper"));
                
                Map<String, Object> parametros = new HashMap<String, Object>();
                parametros.put("anno", anno);
                parametros.put("mes", mes);
                parametros.put("fac", inst);
                
                JasperPrint jasperPrint = JasperFillManager.fillReport(reporte, parametros, new JRBeanCollectionDataSource(listaDespesas));
                //JasperPrint jasperPrint = (JasperPrint)JasperFillManager.fillReport("reorte2.jrprint", null, datasource);
                
                String extencion = "pdf";
                //formato = comboformato.getSelectedIndex();
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                JRExporter exporter = null;
                if (formato == FORMATO_REPORTE_PDF) {
                    exporter = new JRPdfExporter();
                    extencion = "pdf";
                } else if (formato == FORMATO_REPORTE_RTF) {
                    exporter = new JRRtfExporter();
                    extencion = "rtf";
                } else if (formato == FORMATO_REPORTE_HTML) {
                    exporter = new JRHtmlExporter();
                    extencion = "html";
                    exporter.setParameter(JRHtmlExporterParameter.IS_USING_IMAGES_TO_ALIGN, Boolean.FALSE);
                } else if (formato == FORMATO_REPORTE_XML) {
                    exporter = new JRXmlExporter();
                    extencion = "xml";
                } else if (formato == FORMATO_REPORTE_CSV) {
                    exporter = new JRCsvExporter();
                    extencion = "csv";
                } else if (formato == FORMATO_REPORTE_TXT) {
                    exporter = new JRTextExporter();
                    extencion = "txt";
                    /*para los reportes en texto debemos expresar el tamaÃ±o de la pagina*/
                    exporter.setParameter(JRTextExporterParameter.PAGE_HEIGHT, new Integer(70).floatValue());
                    exporter.setParameter(JRTextExporterParameter.PAGE_WIDTH, new Integer(70).floatValue());
                    exporter.setParameter(JRTextExporterParameter.CHARACTER_WIDTH, new Integer(15).floatValue());
                    exporter.setParameter(JRTextExporterParameter.CHARACTER_HEIGHT, new Integer(15).floatValue());
                } else if (formato == FORMATO_REPORTE_XLS) {
                    exporter = new JRXlsExporter();
                    extencion = "xls";
                    /*para los reportes en excel para una mejor visualizacion utilizo esta configuracion*/
                    exporter.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.FALSE);
                    exporter.setParameter(JRXlsExporterParameter.IS_DETECT_CELL_TYPE, Boolean.TRUE);
                    exporter.setParameter(JRXlsExporterParameter.IS_WHITE_PAGE_BACKGROUND, Boolean.FALSE);
                    exporter.setParameter(JRXlsExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_ROWS, Boolean.TRUE);
                    exporter.setParameter(JRXlsExporterParameter.IS_IGNORE_CELL_BORDER, Boolean.FALSE);
                }
                /*marcamos PDF como el formato predeterminado*/
                //FORMATO_REPORTE = FORMATO_REPORTE_PDF;
                /*exportamos el reporte*/
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
                //exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, new java.io.File(nomb + "."+extencion));
                //exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, baos);
                //exporter.exportReport();
                
                //JRExporter exporter = new JRPdfExporter();
                //exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
                exporter.setParameter(JRExporterParameter.OUTPUT_FILE, new java.io.File("reportes/"+nomb + "."+extencion));
                exporter.exportReport();
                File path = new File("reportes/"+nomb + "."+extencion);
                try {
                    Desktop.getDesktop().open(path);
                    
                } catch (IOException ex) {
                    Logger.getLogger(Ventana.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
                
                
                
            } catch (JRException ex) {
                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
            }

        
        
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        //eliminar despesa ventana 3
        if (Config.indiceDespesa[0] != null) {
            try {
                v_m.setEnabled(false);
                int res = JOptionPane.showConfirmDialog(v_m, "Confirmar excluir", "Eliminar", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (res == JOptionPane.NO_OPTION) {
                    v_m.setEnabled(true);
                    this.setVisible(true);
                    v_m.setVisible(true);
                }
                if (res == JOptionPane.YES_OPTION) {
                    int indtabla = verDespesa.getSelectedRow();
                    if (indtabla >= 0) {

                        String inddes = Config.indiceDespesa[indtabla];

                        //eliminar receita
                        String idDes = con.getIdDespesa(inddes);
                        con.delete("despesas", "Id", inddes);

                        //******update
                        String[] annomes = con.getAnnoMesporID(Integer.parseInt(idDes));
                        //String mes = (String) combomesdel.getSelectedItem();

                        //String idRes = rec.getIdresumen() + "";
                        //String idRes = indrec + "";
                        double sumReceita = con.sumaTotalReceita(Integer.parseInt(idDes));
                        double sumDespesas = con.sumaTotalDespesa(Integer.parseInt(idDes));

                        con.update("resumen", "Id", idDes + "", "receitas", sumReceita + "");
                        con.update("resumen", "Id", idDes + "", "despesas", sumDespesas + "");

                        //actualizar
                        actualizarMesAnterior(annomes[0], annomes[1]);
                        //nuevo
                        //annomes[0] = comboannodel.getSelectedItem() + "";
                        //annomes[1] = Config.obtenerIndiceMes((String) combomesdel.getSelectedItem()) + "";
                        dibujarTablaDespesa();
                        dibujarTablaResumen();
                        llenarTablaResumen();
                        //???ver si esta vacio las receita y sepesas del mes y eliminar mes
                    }
                    v_m.setEnabled(true);
                    this.setVisible(true);
                    v_m.setVisible(true);
                }
            } catch (Exception ex) {

            }
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:

        //----------------------------modificar registro tabladespesa------------------------
        if (Config.indiceDespesa[0] != null) {
            try {
                porMenu = false;
                des = new Despesas();
                int indtabla = verDespesa.getSelectedRow();
                if (indtabla >= 0) {
                    con.getDespesaMes(annodespesa.getText(), (mesdespesa.getSelectedIndex() + 1) + "");
                    System.out.println("indtabla " + indtabla);
                    String indrec = Config.indiceDespesa[indtabla];
                    System.out.println("indrec " + indrec);
                    des = con.getUnaDespesas(indrec);
                    String[] annomes = con.getAnnoMesporID(des.getIdresumen());
                    annodespesa.setText(annomes[0]);
                    mesdespesa.setSelectedItem(Config.meses[Integer.parseInt(annomes[1])]);

                    catdes = con.getCatDesGrupo();
                    DefaultComboBoxModel cm1 = new DefaultComboBoxModel(catdes);
                    categoriadespesa.setModel(cm1);

                    subcatdes = con.getCatDesValores(catdes[0]);
                    DefaultComboBoxModel cm2 = new DefaultComboBoxModel(subcatdes);
                    subategoriadespesa.setModel(cm2);

                    codigodespesa.setText(des.getNumero() + "");
                    numerodespesa.setText(des.getNumeroDocumento() + "");
                    coordenadadespesa.setText(des.getCoordenada() + "");

                    //>>>fecha
                    c = new GregorianCalendar();
                    //fecha = 2000-02-02 00:00:00.000000
                    String[] fecdes = des.getFecha().split(" ");
                    //fecha = 2000-02-02
                    fecdes = fecdes[0].split("-");
                    //arreglo fecha = {2000,2,2}
                    //c.set(Integer.parseInt(fecdes[0]), Integer.parseInt(fecdes[1])-1, Integer.parseInt(fecdes[2]));
                    //crearComponenteFecha();
                    datePicker.getModel().setYear(Integer.parseInt(fecdes[0]));
                    datePicker.getModel().setMonth(Integer.parseInt(fecdes[1]) - 1);
                    datePicker.getModel().setDay(Integer.parseInt(fecdes[2]));

                    panel1.removeAll();
                    //panel1 = new JPanel();
                    //fecha.add(new JLabel("fecha"));
                    //panel1.setAlignmentX(LEFT_ALIGNMENT);
                    panel1.add(datePicker);

                    //<<<fecha
                    categoriadespesa.setSelectedItem(des.getCategoria());
                    subategoriadespesa.setSelectedItem(des.getSubcategoria());
                    descripciondespesa.setText(des.getDescripcion() + "");
                    valordespesa.setText(des.getValor() + "");

                    //v_i_r.setVisible(true);
                    accion = MODIFICAR;
                    annodespesa.setEnabled(false);
                    mesdespesa.setEnabled(false);

                    v_i_d.setTitle("MUDANÇA DESPESA");
                    v_i_d.pack();
                    v_i_d.setLocationRelativeTo(v_m.getParent());
                    v_i_d.show();
                    v_i_d.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);

                } else {
                    //inicializarValoresMes("", "");

                }
            } catch (Exception e) {

            }
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        //eliminar ventana 3
        if (Config.indiceReceita[0] != null) {
            try {
                v_m.setEnabled(false);
                int res = JOptionPane.showConfirmDialog(v_m, "Confirmar excluir", "Eliminar", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (res == JOptionPane.NO_OPTION) {
                    v_m.setEnabled(true);
                    this.setVisible(true);
                    v_m.setVisible(true);
                }
                if (res == JOptionPane.YES_OPTION) {
                    rec = new Receitas();
                    int indtabla = verreceita.getSelectedRow();
                    if (indtabla >= 0) {

                        String indrec = Config.indiceReceita[indtabla];

                        //eliminar receita
                        String idRes = con.getIdReceita(indrec);
                        con.delete("receita", "Id", indrec);

                        //******update
                        String[] annomes = con.getAnnoMesporID(Integer.parseInt(idRes));
                        //String mes = (String) combomesdel.getSelectedItem();

                        //String idRes = rec.getIdresumen() + "";
                        //String idRes = indrec + "";
                        double sumReceita = con.sumaTotalReceita(Integer.parseInt(idRes));
                        double sumDespesas = con.sumaTotalDespesa(Integer.parseInt(idRes));

                        con.update("resumen", "Id", idRes + "", "receitas", sumReceita + "");
                        con.update("resumen", "Id", idRes + "", "despesas", sumDespesas + "");

                        //actualizar
                        actualizarMesAnterior(annomes[0], annomes[1]);
                        //nuevo
                        //annomes[0] = comboannodel.getSelectedItem() + "";
                        //annomes[1] = Config.obtenerIndiceMes((String) combomesdel.getSelectedItem()) + "";
                        dibujarTablaReceita();
                        dibujarTablaResumen();
                        llenarTablaResumen();

                        //actualizar tabla general
                        //?
                        //???ver si esta vacio las receita y sepesas del mes y eliminar mes
                    }
                    v_m.setEnabled(true);
                    this.setVisible(true);
                    v_m.setVisible(true);
                }
                //otro
            } catch (Exception ex) {
            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:

        //----------------------------modificar receita--------------------------
        if (Config.indiceReceita[0] != null) {
            try {
                porMenu = false;

                rec = new Receitas();
                int indtabla = verreceita.getSelectedRow();
                System.out.println("ind tab " + indtabla);
                if (indtabla >= 0) {
                    String indrec = Config.indiceReceita[indtabla];

                    rec = con.getUnaReceita(indrec);

                    String[] annomes = con.getAnnoMesporID(rec.getIdresumen());
                    annoreceita.setText(annomes[0]);
                    jComboBox1.setSelectedItem(Config.meses[Integer.parseInt(annomes[1])]);

                    cat_val = con.getCatValor();
                    DefaultComboBoxModel cm = new DefaultComboBoxModel(cat_val[0]);

                    codigoreceita.setText(rec.getNumero() + "");
                    coordenadasreceitas.setText(rec.getCoordenada() + "");
                    categoriareceita.setModel(cm);
                    categoriareceita.setSelectedItem(rec.getCategoria() + "");
                    cantidadreceita.setText(rec.getCantidad() + "");
                    valorreceita.setText(rec.getValor() + "");

                    //v_i_r.setVisible(true);
                    accion = MODIFICAR;
                    annoreceita.setEnabled(false);
                    jComboBox1.setEnabled(false);

                    v_i_r.setTitle("MUDANÇA RECEITA");

                    v_i_r.pack();
                    v_i_r.setLocationRelativeTo(v_m.getParent());
                    v_i_r.show();
                    v_i_r.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
                } else {
                    //inicializarValoresMes("", "");
                }
            } catch (Exception e) {

            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Tabbed1;
    private javax.swing.JTextField annodespesa;
    private javax.swing.JTextField annoreceita;
    private javax.swing.JTextField cantidadreceita;
    private javax.swing.JComboBox categoriadespesa;
    private javax.swing.JComboBox categoriareceita;
    private javax.swing.JTextField codigodespesa;
    private javax.swing.JTextField codigoreceita;
    private javax.swing.JComboBox comboannodel;
    private javax.swing.JComboBox comboformato;
    private javax.swing.JComboBox comboinfoanno;
    private javax.swing.JComboBox comboinfoinst;
    private javax.swing.JComboBox comboinfomes;
    private javax.swing.JComboBox combomes;
    private javax.swing.JComboBox combomesdel;
    private javax.swing.JTextField coordenadadespesa;
    private javax.swing.JTextField coordenadasreceitas;
    private javax.swing.JTextArea descripciondespesa;
    private javax.swing.JDialog dialogdel;
    private javax.swing.JDialog dialoginforme;
    public javax.swing.JPanel fecha;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JLabel labannodel;
    private javax.swing.JLabel labinfomes;
    private javax.swing.JLabel labmesdel;
    private javax.swing.JList listanno;
    private javax.swing.JComboBox mesdespesa;
    private javax.swing.JTextField numerodespesa;
    private javax.swing.JPanel panelder;
    private javax.swing.JPanel panelizquierdo;
    private javax.swing.JPanel paneluno;
    public javax.swing.JPanel pinf;
    private javax.swing.JPanel pinferior;
    private javax.swing.JPanel psup;
    private javax.swing.JPanel psuperior;
    private javax.swing.JComboBox subategoriadespesa;
    private javax.swing.JTable tabla;
    private javax.swing.JTable tabledel;
    private javax.swing.JTextField textinfonomb;
    private javax.swing.JDialog v_i_d;
    private javax.swing.JDialog v_i_r;
    private javax.swing.JDialog v_m;
    private javax.swing.JLabel valoranno;
    private javax.swing.JTextField valordespesa;
    private javax.swing.JLabel valormes;
    private javax.swing.JTextField valorreceita;
    private javax.swing.JTable verDespesa;
    private javax.swing.JTable verreceita;
    private javax.swing.JTable verresumen;
    // End of variables declaration//GEN-END:variables
/*
     public void setFecha() {
     UtilDateModel model = new UtilDateModel();
     model.setDate(1990, 8, 24);
     model.setSelected(true);

     //Panel de Seleccion de fecha
     Properties p = new Properties();
     JDatePanelImpl datePanel = new JDatePanelImpl(model, p);

     //Creando el panel barra
     JFormattedTextField.AbstractFormatter f = new JFormattedTextField.AbstractFormatter() {
     private String datePattern = "yyyy-MM-dd";
     private SimpleDateFormat dateFormatter = new SimpleDateFormat(datePattern);

     @Override
     public Object stringToValue(String text) throws ParseException {
     return dateFormatter.parseObject(text);
     }

     @Override
     public String valueToString(Object value) throws ParseException {
     if (value != null) {
     Calendar cal = (Calendar) value;
     return dateFormatter.format(cal.getTime());
     }

     return "";
     }
     };
     datePicker = new JDatePickerImpl(datePanel, f);

     panel = new JPanel();
     //fecha.add(new JLabel("fecha"));
     panel.add(datePicker);

     //JFrame frame = new JFrame("fecha");
     //frame.getContentPane().add(panel);
     // frame.setSize(500, 500);
     //frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
     //frame.show();
     }
     */

    //mes numero entero
    private void inicializarValoresMes(String anno, String mes) {

        //System.out.println("anno-mes " + anno + " " + mes);
        if (!anno.equals("") && mes.equals("")) {
            annomes = con.getAnnoMes(anno);
        } else if (!mes.equals("")) {
            annomes = new String[]{anno, mes, Config.meses[Integer.parseInt(mes)]};
        } else {
            annomes = con.getAnnoMes();
        }

        //System.out.println("anno mes " + annomes[0] + " " + annomes[1]);
        String[] listannos = con.getListaAnnos();
        String[] listameses = con.getListaMeses(annomes[0]);

        //convertir lista a cadena
        String[] newlistameses = new String[listameses.length];
        for (int i = 0; i < listameses.length; i++) {
            newlistameses[i] = Config.meses[Integer.parseInt(listameses[i])];

        }

        listanno.setListData(listannos);

        if (mes.equals("")) {
            DefaultComboBoxModel cbm = new DefaultComboBoxModel(newlistameses);
            combomes.setModel(cbm);
        }

        valormes.setText(annomes[2]);
        valoranno.setText(annomes[0]);

        dibujarTablaResumen();

        dibujarTablaReceita();

        dibujarTablaDespesa();

    }

    public int obtenermes(String mes) {
        int indmes = 0;
        if (mes.equals("Janeiro")) {
            indmes = 1;
        } else if (mes.equals("Fevereiro")) {
            indmes = 2;
        } else if (mes.equals("Março")) {
            indmes = 3;
        } else if (mes.equals("Abril")) {
            indmes = 4;
        } else if (mes.equals("Maio")) {
            indmes = 5;
        } else if (mes.equals("Junho")) {
            indmes = 6;
        } else if (mes.equals("Julho")) {
            indmes = 7;
        } else if (mes.equals("Agosto")) {
            indmes = 8;
        } else if (mes.equals("Setembro")) {
            indmes = 9;
        } else if (mes.equals("Outubro")) {
            indmes = 10;
        } else if (mes.equals("Novembro")) {
            indmes = 11;
        } else if (mes.equals("Dezembro")) {
            indmes = 12;
        }

        return indmes;
    }

    private void insertarReceita(String anno, String mes, Receitas r) {
        try {
            if (con.cantResumen(anno, mes) >= 1) {

            } else {
                try {
                    //insertar resumen
                    Resumen res = new Resumen();
                    res.setAnno(Integer.parseInt(anno));
                    res.setMes(Integer.parseInt(mes));
                    con.insertarResumen(res);

                } catch (SQLException ex) {
                    Logger.getLogger(Ventana.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }

            //inertar receita
            String idRes = con.getIdResumen(anno, mes);
            if (!idRes.equals("")) {
                r.setIdresumen(Integer.parseInt(idRes));
                con.insertarReceita(r);
            }
            //update
            double sumReceita = con.sumaTotalReceita(Integer.parseInt(idRes));
            double sumDespesas = con.sumaTotalDespesa(Integer.parseInt(idRes));

            con.update("resumen", "Id", idRes + "", "receitas", sumReceita + "");
            con.update("resumen", "Id", idRes + "", "despesas", sumDespesas + "");
            //actualizar
            //actualizar tabla general
            actualizarMesAnterior(anno, Config.meses[Integer.parseInt(mes)]);

        } catch (SQLException ex) {
            Logger.getLogger(Ventana.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void insertarDespesa(String anno, String mes, Despesas d) {
        try {
            if (con.cantResumen(anno, mes) >= 1) {

            } else {
                try {
                    //insertar resumen
                    Resumen res = new Resumen();
                    res.setAnno(Integer.parseInt(anno));
                    res.setMes(Integer.parseInt(mes));
                    con.insertarResumen(res);

                } catch (SQLException ex) {
                    Logger.getLogger(Ventana.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }

            //inertar receita
            String idRes = con.getIdResumen(anno, mes);
            if (!idRes.equals("")) {
                d.setIdresumen(Integer.parseInt(idRes));
                con.insertarDespensa(d);
            }
            //update
            double sumReceita = con.sumaTotalReceita(Integer.parseInt(idRes));
            double sumDespesas = con.sumaTotalDespesa(Integer.parseInt(idRes));

            con.update("resumen", "Id", idRes + "", "receitas", sumReceita + "");
            con.update("resumen", "Id", idRes + "", "despesas", sumDespesas + "");

            //actualizar
            //actualizar tabla general
            actualizarMesAnterior(anno, Config.meses[Integer.parseInt(mes)]);

        } catch (SQLException ex) {
            Logger.getLogger(Ventana.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void actualizarMesAnterior(String anno, String mes) {
        try {
            System.out.println("a m " + anno + " " + mes);
            String[][] resumenes = con.getResumen();
            for (int i = (resumenes.length - 2); i >= 0; i--) {
                //System.out.println("ni " + i);
                if (Integer.parseInt(anno) <= Integer.parseInt(resumenes[i][0])) {
                    double saldoanterior = con.getSaldoAnterior(Config.indiceResumen[i + 1]);
                    con.update("resumen", "Id", Config.indiceResumen[i], "saldoanterior", saldoanterior + "");

                    System.out.println("i " + i);

                }

            }

        } catch (SQLException ex) {
            Logger.getLogger(Ventana.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void llenarTablaResumen() {
        try {
            String[] nombresColumnas = new String[]{"Ano", "Mês", "Receita Total", "Sum Despensas", "Saldo Mensal", "Saldo anterior", "Saldo atual"};
            valoresmodelo = con.getResumen();
            modelo = new DefaultTableModel(valoresmodelo, nombresColumnas) {

                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };
            tabla.setModel(modelo);

        } catch (SQLException ex) {
            Logger.getLogger(Ventana.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void crearComponenteFecha() {
        model = new UtilDateModel();

        model.setDate(c.get(Calendar.YEAR), c.get(Calendar.MONTH), c.get(Calendar.DAY_OF_MONTH));
        //model.setDate(1990, 8, 24);
        model.setSelected(true);

        //Panel de Seleccion de fecha
        Properties p = new Properties();
        JDatePanelImpl datePanel = new JDatePanelImpl(model, p);

        //Creando el panel barra
        JFormattedTextField.AbstractFormatter f = new JFormattedTextField.AbstractFormatter() {
            private String datePattern = "yyyy-MM-dd";
            private SimpleDateFormat dateFormatter = new SimpleDateFormat(datePattern);

            @Override
            public Object stringToValue(String text) throws ParseException {
                return dateFormatter.parseObject(text);
            }

            @Override
            public String valueToString(Object value) throws ParseException {
                if (value != null) {
                    Calendar cal = (Calendar) value;
                    return dateFormatter.format(cal.getTime());
                }

                return "";
            }
        };
        datePicker = new JDatePickerImpl(datePanel, f);
        datePicker.setSize(243, 30);
    }

    private void actualizarReceita(String anno, String mes, Receitas r) {
        try {
            //inertar receita
            String idRes = r.getIdresumen() + "";
            con.actualizarReceita(r);

            //update
            double sumReceita = con.sumaTotalReceita(Integer.parseInt(idRes));
            double sumDespesas = con.sumaTotalDespesa(Integer.parseInt(idRes));

            con.update("resumen", "Id", idRes + "", "receitas", sumReceita + "");
            con.update("resumen", "Id", idRes + "", "despesas", sumDespesas + "");
            //actualizar
            //actualizar tabla general
            con.getResumen();
            actualizarMesAnterior(anno, Config.meses[Integer.parseInt(mes)]);

        } catch (SQLException ex) {
            Logger.getLogger(Ventana.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void dibujarTablaReceita() {
        String[] nombresColumnasReceita = new String[]{"N / O", "dados bancários", "Categoria", "Quantidade", "Valor", "Total"};
        DefaultTableModel modeloReceita = new DefaultTableModel(con.getReceitaMes(annomes[0], annomes[1]), nombresColumnasReceita) {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        verreceita.setModel(modeloReceita);
        verreceita.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        TableColumnModel tcmr = verreceita.getColumnModel();
        tcmr.getColumn(0).setPreferredWidth(80);
        tcmr.getColumn(1).setPreferredWidth(80);
        tcmr.getColumn(2).setPreferredWidth(420);
        tcmr.getColumn(3).setPreferredWidth(70);
        tcmr.getColumn(4).setPreferredWidth(100);
        tcmr.getColumn(5).setPreferredWidth(100);
        //verreceita.doLayout();
    }

    private void dibujarTablaDespesa() {
        String[] nombresColumnasDespesas = new String[]{"N / O", "N DOCUMENTO", "dados bancários", "DATA", "CATEGORIA", "SUBCATEGORIA", "descrição", "valor"};
        DefaultTableModel modeloDespesa = new DefaultTableModel(con.getDespesaMes(annomes[0], annomes[1]), nombresColumnasDespesas) {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        verDespesa.setModel(modeloDespesa);
        verDespesa.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        TableColumnModel tcmd = verDespesa.getColumnModel();
        tcmd.getColumn(0).setPreferredWidth(80);
        tcmd.getColumn(1).setPreferredWidth(110);
        tcmd.getColumn(2).setPreferredWidth(80);
        tcmd.getColumn(3).setPreferredWidth(80);
        tcmd.getColumn(4).setPreferredWidth(300);
        tcmd.getColumn(5).setPreferredWidth(350);
        tcmd.getColumn(6).setPreferredWidth(350);
        tcmd.getColumn(7).setPreferredWidth(120);
    }

    private void dibujarTablaResumen() {
        String[] nombresColumnasResumen = new String[]{"", "Valor"};
        DefaultTableModel modeloResumen = new DefaultTableModel(con.getResumenMes(annomes[0], annomes[1]), nombresColumnasResumen) {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        verresumen.setModel(modeloResumen);
        verresumen.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        TableColumnModel tcmres = verresumen.getColumnModel();
        tcmres.getColumn(0).setPreferredWidth(150);
        tcmres.getColumn(1).setPreferredWidth(150);
    }

    //-------------------------Metodos ventana del---------------
    private void inicializarValoresMes2(String anno, String mes) {

        //System.out.println("anno-mes " + anno + " " + mes);
        if (!anno.equals("") && mes.equals("")) {
            annomes = con.getAnnoMes(anno);
        } else if (!mes.equals("")) {
            annomes = new String[]{anno, mes, Config.meses[Integer.parseInt(mes)]};
            System.out.println("ano mes ver " + annomes[0] + annomes[1]);

        } else {
            annomes = con.getAnnoMes();
        }

        //System.out.println("anno mes " + annomes[0] + " " + annomes[1]);
        String[] listannos = con.getListaAnnos();
        String[] listameses = con.getListaMeses(annomes[0]);

        //convertir lista a cadena
        String[] newlistameses = new String[listameses.length];
        for (int i = 0; i < listameses.length; i++) {
            newlistameses[i] = Config.meses[Integer.parseInt(listameses[i])];

        }

        System.out.println("ano mes ver1 " + annomes[0] + annomes[1]);

        //listanno.setListData(listannos);
        if (anno.equals("")) {
            DefaultComboBoxModel cbm1 = new DefaultComboBoxModel(listannos);
            comboannodel.setModel(cbm1);
            comboannodel.setSelectedItem(anno);

            comboannodel.setSelectedItem(annomes[0]);
        }

        if (mes.equals("")) {
            DefaultComboBoxModel cbm2 = new DefaultComboBoxModel(newlistameses);
            combomesdel.setModel(cbm2);

        }
        if (!(mes.equals(""))) {
            combomesdel.setSelectedItem(Config.meses[Integer.parseInt(mes)]);
        }

        //valormes.setText(annomes[2]);
        //valoranno.setText(annomes[0]);
        if (isTabla == RESUMEN) {
            try {
                String[] nombresColumnas = new String[]{"Ano", "Mês", "Receita Total", "Sum Despensas", "Saldo Mensal", "Saldo anterior", "Saldo atual"};
                valoresmodelo = con.getResumen();
                modelo = new DefaultTableModel(valoresmodelo, nombresColumnas) {

                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };
                tabledel.setModel(modelo);

            } catch (SQLException ex) {
                Logger.getLogger(Ventana.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (isTabla == RECEITA) {
            dibujarTablaReceita2();
        }
        if (isTabla == DESPESA) {
            dibujarTablaDespesa2();
        }
    }

    private void dibujarTablaReceita2() {
        String[] nombresColumnasReceita = new String[]{"N / S", "CATEGORIA", "dados bancários", "Quantidade", "Valor", "Total"};
        System.out.println("ano mes " + annomes[0] + annomes[1]);
        DefaultTableModel modeloReceita = new DefaultTableModel(con.getReceitaMes(annomes[0], annomes[1]), nombresColumnasReceita) {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        tabledel.setModel(modeloReceita);
        tabledel.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        TableColumnModel tcmr = tabledel.getColumnModel();
        tcmr.getColumn(0).setPreferredWidth(70);
        tcmr.getColumn(1).setPreferredWidth(70);
        tcmr.getColumn(2).setPreferredWidth(550);
        tcmr.getColumn(3).setPreferredWidth(70);
        tcmr.getColumn(4).setPreferredWidth(70);
        tcmr.getColumn(5).setPreferredWidth(70);
        //verreceita.doLayout();
    }

    private void dibujarTablaDespesa2() {
        String[] nombresColumnasDespesas = new String[]{"N / O", "N DOCUMENTO", "dados bancários", "DATA", "CATEGORIA", "SUBCATEGORIA", "descrição", "valor"};
        DefaultTableModel modeloDespesa = new DefaultTableModel(con.getDespesaMes(annomes[0], annomes[1]), nombresColumnasDespesas) {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tabledel.setModel(modeloDespesa);
        tabledel.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        TableColumnModel tcmd = tabledel.getColumnModel();
        tcmd.getColumn(0).setPreferredWidth(70);
        tcmd.getColumn(1).setPreferredWidth(110);
        tcmd.getColumn(2).setPreferredWidth(70);
        tcmd.getColumn(3).setPreferredWidth(80);
        tcmd.getColumn(4).setPreferredWidth(300);
        tcmd.getColumn(5).setPreferredWidth(300);
        tcmd.getColumn(6).setPreferredWidth(300);
        tcmd.getColumn(7).setPreferredWidth(70);
    }

    private void dibujarTablaResumen2() {
        String[] nombresColumnasResumen = new String[]{"", "Valor"};
        DefaultTableModel modeloResumen = new DefaultTableModel(con.getResumenMes(annomes[0], annomes[1]), nombresColumnasResumen) {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        tabledel.setModel(modeloResumen);
        tabledel.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        TableColumnModel tcmres = tabledel.getColumnModel();
        tcmres.getColumn(0).setPreferredWidth(100);
        tcmres.getColumn(1).setPreferredWidth(70);
    }

    private void actualizarTotales(String idRes, String anno, String mes) {
        try {
            //update
            double sumReceita = con.sumaTotalReceita(Integer.parseInt(idRes));
            double sumDespesas = con.sumaTotalDespesa(Integer.parseInt(idRes));

            con.update("resumen", "Id", idRes + "", "receitas", sumReceita + "");
            con.update("resumen", "Id", idRes + "", "despesas", sumDespesas + "");
            //actualizar
            //actualizar tabla general
            actualizarMesAnterior(anno, Config.meses[Integer.parseInt(mes)]);

        } catch (SQLException ex) {
            Logger.getLogger(Ventana.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    //informe receita
    public void informeReceita(String anno, String mes, String institucion, String nombre) {
        try {
            // TODO add your handling code here:
            //reporte Receita

            // TODO code application logic here
            LinkedList<ObjReceita> listaResumen = con.getListaReceita(anno, Config.obtenerIndiceMes(mes) + "");

            //System.out.println("tamanno " + listaReceita.size());
            JasperReport reporte = (JasperReport) JRLoader.loadObject(new File("src\\reportes\\reporteReceita.jasper"));

            Map<String, Object> parametros = new HashMap<String, Object>();
            parametros.put("anno", anno);
            parametros.put("mes", mes);
            parametros.put("fac", institucion);

            JasperPrint jasperPrint = JasperFillManager.fillReport(reporte, parametros, new JRBeanCollectionDataSource(listaResumen));
            //JasperPrint jasperPrint = (JasperPrint)JasperFillManager.fillReport("reorte2.jrprint", null, datasource);

            String extencion = "pdf";
            formato = comboformato.getSelectedIndex();
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            JRExporter exporter = null;
            if (formato == FORMATO_REPORTE_PDF) {
                exporter = new JRPdfExporter();
                extencion = "pdf";
            } else if (formato == FORMATO_REPORTE_RTF) {
                exporter = new JRRtfExporter();
                extencion = "rtf";
            } else if (formato == FORMATO_REPORTE_HTML) {
                exporter = new JRHtmlExporter();
                extencion = "html";
                exporter.setParameter(JRHtmlExporterParameter.IS_USING_IMAGES_TO_ALIGN, Boolean.FALSE);
            } else if (formato == FORMATO_REPORTE_XML) {
                exporter = new JRXmlExporter();
                extencion = "xml";
            } else if (formato == FORMATO_REPORTE_CSV) {
                exporter = new JRCsvExporter();
                extencion = "csv";
            } else if (formato == FORMATO_REPORTE_TXT) {
                exporter = new JRTextExporter();
                extencion = "txt";
                /*para los reportes en texto debemos expresar el tamaÃ±o de la pagina*/
                exporter.setParameter(JRTextExporterParameter.PAGE_HEIGHT, new Integer(70).floatValue());
                exporter.setParameter(JRTextExporterParameter.PAGE_WIDTH, new Integer(70).floatValue());
                exporter.setParameter(JRTextExporterParameter.CHARACTER_WIDTH, new Integer(15).floatValue());
                exporter.setParameter(JRTextExporterParameter.CHARACTER_HEIGHT, new Integer(15).floatValue());
            } else if (formato == FORMATO_REPORTE_XLS) {
                exporter = new JRXlsExporter();
                extencion = "xls";
                /*para los reportes en excel para una mejor visualizacion utilizo esta configuracion*/
                exporter.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.FALSE);
                exporter.setParameter(JRXlsExporterParameter.IS_DETECT_CELL_TYPE, Boolean.TRUE);
                exporter.setParameter(JRXlsExporterParameter.IS_WHITE_PAGE_BACKGROUND, Boolean.FALSE);
                exporter.setParameter(JRXlsExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_ROWS, Boolean.TRUE);
                exporter.setParameter(JRXlsExporterParameter.IS_IGNORE_CELL_BORDER, Boolean.FALSE);
            }
            /*marcamos PDF como el formato predeterminado*/
            //FORMATO_REPORTE = FORMATO_REPORTE_PDF;
            /*exportamos el reporte*/
            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            //exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, new java.io.File(nomb + "."+extencion));
            //exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, baos);
            //exporter.exportReport();

            //JRExporter exporter = new JRPdfExporter();
            //exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exporter.setParameter(JRExporterParameter.OUTPUT_FILE, new java.io.File("reportes/"+nombre + "."+extencion));
            exporter.exportReport();
            File path = new File("reportes/"+nombre + "."+extencion);
            try {
                Desktop.getDesktop().open(path);
            
            } catch (IOException ex) {
                Logger.getLogger(Ventana.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

        } catch (JRException ex) {
            Logger.getLogger(Ventana.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void informeDespesa(String anno, String mes, String inst, String nomb) {
        try {
            // TODO add your handling code here:
            //reporte Receita

            // TODO code application logic here
            LinkedList<ObjDespesa> listaDespesas = con.getListaDespesa(anno, Config.obtenerIndiceMes(mes) + "");

            System.out.println("tamanno " + listaDespesas.size());

            JasperReport reporte = (JasperReport) JRLoader.loadObject(new File("src\\reportes\\reporteDespesa.jasper"));

            Map<String, Object> parametros = new HashMap<String, Object>();
            parametros.put("anno", anno);
            parametros.put("mes", mes);
            parametros.put("fac", inst);

            JasperPrint jasperPrint = JasperFillManager.fillReport(reporte, parametros, new JRBeanCollectionDataSource(listaDespesas));
            //JasperPrint jasperPrint = (JasperPrint)JasperFillManager.fillReport("reorte2.jrprint", null, datasource);

            String extencion = "pdf";
            formato = comboformato.getSelectedIndex();
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            JRExporter exporter = null;
            if (formato == FORMATO_REPORTE_PDF) {
                exporter = new JRPdfExporter();
                extencion = "pdf";
            } else if (formato == FORMATO_REPORTE_RTF) {
                exporter = new JRRtfExporter();
                extencion = "rtf";
            } else if (formato == FORMATO_REPORTE_HTML) {
                exporter = new JRHtmlExporter();
                extencion = "html";
                exporter.setParameter(JRHtmlExporterParameter.IS_USING_IMAGES_TO_ALIGN, Boolean.FALSE);
            } else if (formato == FORMATO_REPORTE_XML) {
                exporter = new JRXmlExporter();
                extencion = "xml";
            } else if (formato == FORMATO_REPORTE_CSV) {
                exporter = new JRCsvExporter();
                extencion = "csv";
            } else if (formato == FORMATO_REPORTE_TXT) {
                exporter = new JRTextExporter();
                extencion = "txt";
                /*para los reportes en texto debemos expresar el tamaÃ±o de la pagina*/
                exporter.setParameter(JRTextExporterParameter.PAGE_HEIGHT, new Integer(70).floatValue());
                exporter.setParameter(JRTextExporterParameter.PAGE_WIDTH, new Integer(70).floatValue());
                exporter.setParameter(JRTextExporterParameter.CHARACTER_WIDTH, new Integer(15).floatValue());
                exporter.setParameter(JRTextExporterParameter.CHARACTER_HEIGHT, new Integer(15).floatValue());
            } else if (formato == FORMATO_REPORTE_XLS) {
                exporter = new JRXlsExporter();
                extencion = "xls";
                /*para los reportes en excel para una mejor visualizacion utilizo esta configuracion*/
                exporter.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.FALSE);
                exporter.setParameter(JRXlsExporterParameter.IS_DETECT_CELL_TYPE, Boolean.TRUE);
                exporter.setParameter(JRXlsExporterParameter.IS_WHITE_PAGE_BACKGROUND, Boolean.FALSE);
                exporter.setParameter(JRXlsExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_ROWS, Boolean.TRUE);
                exporter.setParameter(JRXlsExporterParameter.IS_IGNORE_CELL_BORDER, Boolean.FALSE);
            }
            /*marcamos PDF como el formato predeterminado*/
            //FORMATO_REPORTE = FORMATO_REPORTE_PDF;
            /*exportamos el reporte*/
            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            //exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, new java.io.File(nomb + "."+extencion));
            //exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, baos);
            //exporter.exportReport();

            //JRExporter exporter = new JRPdfExporter();
            //exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exporter.setParameter(JRExporterParameter.OUTPUT_FILE, new java.io.File("reportes/"+nomb + "."+extencion));
            exporter.exportReport();
            File path = new File("reportes/"+nomb + "."+extencion);
            try {
                Desktop.getDesktop().open(path);
            
            } catch (IOException ex) {
                Logger.getLogger(Ventana.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

        } catch (JRException ex) {
            Logger.getLogger(Ventana.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void informeMes(String anno, String mes, String inst, String nomb) {
        try {
            // TODO add your handling code here:
            //informe mes

            // TODO code application logic here
            List listaMeses = new ArrayList();

            List objresumen = new ArrayList();

            String idparam = con.getIdResumen(anno, Config.obtenerIndiceMes(mes) + "");
            String[][] cat = con.getGrupoCategoriaSum(idparam);

            Mes m = new Mes();
            String[][] datosR = con.getResumenMes(anno, Config.obtenerIndiceMes(mes) + "");

            //m.setRec(datosR[0][1]);
            objresumen.add(new ObjResumen("RECEITA", datosR[0][1]));
            //m.setDes(datosR[1][1]);
            objresumen.add(new ObjResumen("DESPESAS", datosR[1][1]));
            //String[] datosN = con.getCatDesGrupo();
            //cambiar
            for (int i = 0; i < cat.length; i++) {
                // String[] datosR1 = datosR[i];
                objresumen.add(new ObjResumen("\t" + cat[i][0], cat[i][1]));

            }
            //m.setUno(cat[0][1]);
            //m.setDos(cat[1][1]);
            //m.setTres(cat[2][1]);
            //m.setCuatro(cat[3][1]);
            //m.setCinco(cat[4][1]);

            //m.setDis(datosR[2][1]);
            objresumen.add(new ObjResumen("TOTAL MÊS", datosR[2][1]));
            //m.setAnt(datosR[3][1]);
            objresumen.add(new ObjResumen("TOTAL ANTERIOR", datosR[3][1]));
            //m.setAct(datosR[4][1]);
            objresumen.add(new ObjResumen("TOTAL CURRENT", datosR[4][1]));

            m.setResumens(objresumen);
            m.setReceitas(con.getListaReceita(anno, Config.obtenerIndiceMes(mes) + ""));
            m.setDespesas(con.getListaDespesa(anno, Config.obtenerIndiceMes(mes) + ""));
            listaMeses.add(m);

            //for (int j = 1; j <= 3; j++)
            //{
            //   alumno.addMateria(new Materia(j, "Materia " + j));
            //}
            Map<String, Object> parametros = new HashMap<String, Object>();
            parametros.put("fac", inst);
            parametros.put("anno", anno);
            parametros.put("mes", mes);

            JasperReport reporte = (JasperReport) JRLoader.loadObject(new File("src\\reportes\\reportMes1.jasper"));
            JasperPrint jasperPrint = JasperFillManager.fillReport(reporte, parametros, new JRBeanCollectionDataSource(listaMeses));
            //JasperPrint jasperPrint = JasperFillManager.fillReport(reporte, null, datasource);

            String extencion = "pdf";
            formato = comboformato.getSelectedIndex();
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            JRExporter exporter = null;
            if (formato == FORMATO_REPORTE_PDF) {
                exporter = new JRPdfExporter();
                extencion = "pdf";
            } else if (formato == FORMATO_REPORTE_RTF) {
                exporter = new JRRtfExporter();
                extencion = "rtf";
            } else if (formato == FORMATO_REPORTE_HTML) {
                exporter = new JRHtmlExporter();
                extencion = "html";
                exporter.setParameter(JRHtmlExporterParameter.IS_USING_IMAGES_TO_ALIGN, Boolean.FALSE);
            } else if (formato == FORMATO_REPORTE_XML) {
                exporter = new JRXmlExporter();
                extencion = "xml";
            } else if (formato == FORMATO_REPORTE_CSV) {
                exporter = new JRCsvExporter();
                extencion = "csv";
            } else if (formato == FORMATO_REPORTE_TXT) {
                exporter = new JRTextExporter();
                extencion = "txt";
                /*para los reportes en texto debemos expresar el tamaÃ±o de la pagina*/
                exporter.setParameter(JRTextExporterParameter.PAGE_HEIGHT, new Integer(70).floatValue());
                exporter.setParameter(JRTextExporterParameter.PAGE_WIDTH, new Integer(70).floatValue());
                exporter.setParameter(JRTextExporterParameter.CHARACTER_WIDTH, new Integer(15).floatValue());
                exporter.setParameter(JRTextExporterParameter.CHARACTER_HEIGHT, new Integer(15).floatValue());
            } else if (formato == FORMATO_REPORTE_XLS) {
                exporter = new JRXlsExporter();
                extencion = "xls";
                /*para los reportes en excel para una mejor visualizacion utilizo esta configuracion*/
                exporter.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.FALSE);
                exporter.setParameter(JRXlsExporterParameter.IS_DETECT_CELL_TYPE, Boolean.TRUE);
                exporter.setParameter(JRXlsExporterParameter.IS_WHITE_PAGE_BACKGROUND, Boolean.FALSE);
                exporter.setParameter(JRXlsExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_ROWS, Boolean.TRUE);
                exporter.setParameter(JRXlsExporterParameter.IS_IGNORE_CELL_BORDER, Boolean.FALSE);
            }
            /*marcamos PDF como el formato predeterminado*/
            //FORMATO_REPORTE = FORMATO_REPORTE_PDF;
            /*exportamos el reporte*/
            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            //exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, new java.io.File(nomb + "."+extencion));
            //exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, baos);
            //exporter.exportReport();

            //JRExporter exporter = new JRPdfExporter();
            //exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exporter.setParameter(JRExporterParameter.OUTPUT_FILE, new java.io.File("reportes/"+nomb + "."+extencion));
            exporter.exportReport();
            File path = new File("reportes/"+nomb + "."+extencion);
            try {
                Desktop.getDesktop().open(path);
            
            } catch (IOException ex) {
                Logger.getLogger(Ventana.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

        } catch (JRException ex) {
            Logger.getLogger(Ventana.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void informeAnno(String anno, String inst, String nomb) {
        try {
            // TODO add your handling code here:
            //reporte Receita

            // TODO code application logic here
            LinkedList<ObjMes> listaResumen = con.getListaResumenes(anno);

            // System.out.println("tamanno " + listaReceita.size());
            JasperReport reporte = (JasperReport) JRLoader.loadObject(new File("src\\reportes\\reportAnno.jasper"));

            Map<String, Object> parametros = new HashMap<String, Object>();
            parametros.put("anno", anno);
            parametros.put("fac", inst);

            JasperPrint jasperPrint = JasperFillManager.fillReport(reporte, parametros, new JRBeanCollectionDataSource(listaResumen));
            //JasperPrint jasperPrint = (JasperPrint)JasperFillManager.fillReport("reorte2.jrprint", null, datasource);
            String extencion = "";
            formato = comboformato.getSelectedIndex();
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            JRExporter exporter = null;
            if (formato == FORMATO_REPORTE_PDF) {
                exporter = new JRPdfExporter();
                extencion = "pdf";
            } else if (formato == FORMATO_REPORTE_RTF) {
                exporter = new JRRtfExporter();
                extencion = "rtf";
            } else if (formato == FORMATO_REPORTE_HTML) {
                exporter = new JRHtmlExporter();
                extencion = "html";
                exporter.setParameter(JRHtmlExporterParameter.IS_USING_IMAGES_TO_ALIGN, Boolean.FALSE);
            } else if (formato == FORMATO_REPORTE_XML) {
                exporter = new JRXmlExporter();
                extencion = "xml";
            } else if (formato == FORMATO_REPORTE_CSV) {
                exporter = new JRCsvExporter();
                extencion = "csv";
            } else if (formato == FORMATO_REPORTE_TXT) {
                exporter = new JRTextExporter();
                extencion = "txt";
                /*para los reportes en texto debemos expresar el tamaÃ±o de la pagina*/
                exporter.setParameter(JRTextExporterParameter.PAGE_HEIGHT, new Integer(70).floatValue());
                exporter.setParameter(JRTextExporterParameter.PAGE_WIDTH, new Integer(70).floatValue());
                exporter.setParameter(JRTextExporterParameter.CHARACTER_WIDTH, new Integer(15).floatValue());
                exporter.setParameter(JRTextExporterParameter.CHARACTER_HEIGHT, new Integer(15).floatValue());
            } else if (formato == FORMATO_REPORTE_XLS) {
                exporter = new JRXlsExporter();
                extencion = "xls";
                /*para los reportes en excel para una mejor visualizacion utilizo esta configuracion*/
                exporter.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.FALSE);
                exporter.setParameter(JRXlsExporterParameter.IS_DETECT_CELL_TYPE, Boolean.TRUE);
                exporter.setParameter(JRXlsExporterParameter.IS_WHITE_PAGE_BACKGROUND, Boolean.FALSE);
                exporter.setParameter(JRXlsExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_ROWS, Boolean.TRUE);
                exporter.setParameter(JRXlsExporterParameter.IS_IGNORE_CELL_BORDER, Boolean.FALSE);
            }
            /*marcamos PDF como el formato predeterminado*/
            //FORMATO_REPORTE = FORMATO_REPORTE_PDF;
            /*exportamos el reporte*/
            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            //exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, new java.io.File(nomb + "."+extencion));
            //exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, baos);
            //exporter.exportReport();

            //JRExporter exporter = new JRPdfExporter();
            //exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exporter.setParameter(JRExporterParameter.OUTPUT_FILE, new java.io.File("reportes/"+nomb + "."+extencion));
            exporter.exportReport();
            File path = new File("reportes/"+nomb + "."+extencion);
            try {
                Desktop.getDesktop().open(path);
            
            } catch (IOException ex) {
                Logger.getLogger(Ventana.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

        } catch (JRException ex) {
            Logger.getLogger(Ventana.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean isDigitoInt(String texto) {
        try {
            int num = Integer.parseInt(texto);
        } catch (Exception e) {
            return false;
        }
        return true;
    }

    private boolean isDigitoDouble(String texto) {
        try {
            double num = Double.parseDouble(texto);
        } catch (Exception e) {
            return false;
        }
        return true;
    }

    private boolean isVacio(String texto) {
        return texto.length() == 0;
    }

}
